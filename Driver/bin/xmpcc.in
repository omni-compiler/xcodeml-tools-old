#!/bin/bash

### Read configration file and library ###
OMNI_HOME=@OMNI_HOME@
. ${OMNI_HOME}/etc/xmpcc.conf
. ${OMNI_HOME}/libexec/driver_common.sh

### Directory for saving intermediate files ###
PID=$$
TEMP_DIR=/tmp/__omni_tmp__${PID}
DEBUG_TEMP_DIR="__omni_tmp__"

### Default options ###
ENABLE_LINKER=true
ONLY_PP=false
VERBOSE=false
ENABLE_DEBUG=false
OUTPUT_TEMPORAL=false
DRY_RUN=false
STOP_PP=false
STOP_FRONTEND=false
STOP_TRANSLATOR=false
STOP_BACKEND=false
STOP_COMPILE=false
ENABLE_OPENMP=false
ENABLE_XACC=false
ENABLE_SCALASCA_ALL=false
ENABLE_SCALASCA=false
ENABLE_TLOG_ALL=false
ENABLE_TLOG=false

# Additional options defined by command line (e.g. --Wl..)
# These parameters are set in xmp_set_parameters().
OUTPUT_FILE=
PROFILE_OPT=
OPENMP_ADD_OPT=
PP_ADD_OPT=
FRONTEND_ADD_OPT=
XCODE_TRANSLATOR_ADD_OPT=
BACKEND_ADD_OPT=
NATIVE_ADD_OPT=
LINKER_ADD_OPT=

### Set options ###
# e.g.) xmpcc -I/usr/lib a.c b.c c.o --tmp --Wlfoo lib.a -omp
#
#  c_files="a.c b.c"                  # C files
#  archive_files="lib.a"              # Archive files
#  obj_files="c.o"                    # Object files
#  other_args="-I/usr/lib"            # Options for Preprocessor, Compiler, and Linker
# 
#  Note that "-omp" is extracted by xmp_set_parameters, and set "ENABLE_OPENMP".
c_files=
archive_files=
obj_files=
other_args=
xmp_set_parameters ${@+"$@"}
xmp_check_file_exist

### Create temporal directory ###
if [ $ENABLE_DEBUG = true ]; then
    TEMP_DIR=$DEBUG_TEMP_DIR
    if [ -d $TEMP_DIR ]; then
	xmp_exec rm -rf $TEMP_DIR
    fi
fi

xmp_exec mkdir -p $TEMP_DIR

### Clean temporal directory before exit ###
trap "rm -rf $TEMP_DIR; exit 1" 1 2 3 15

### Preprocessor ###
for c_file in $c_files; do
    FILE_NAME=`xmp_norm_file_name $c_file`     # ./hoge/fuga.c -> hoge_2f_fuga_2f_a
    FILE_PP_C=${TEMP_DIR}/${FILE_NAME}_pp.c
    FILE_PP_I=${TEMP_DIR}/${FILE_NAME}_pp.i

    xmp_exec $OMNI_REPLACE_PRAGMA_CMD $OMNI_REPLACE_PRAGMA_OPT $c_file -o $FILE_PP_C
    xmp_exec $OMNI_CPP_CMD $PP_ADD_OPT $OMNI_CPP_OPT $other_args $FILE_PP_C ">" $FILE_PP_I
    # AIX compiler cannot output file with ".i" suffix. So, ">" is used.

    if [ $ONLY_PP = true ]; then
	if [ "$OUTPUT_FILE" = "" ]; then
	    xmp_exec cat $FILE_PP_I
	else
	    xmp_exec cat $FILE_PP_I ">>" $OUTPUT_FILE
	fi
    fi
done
[ $STOP_PP = true ] && exit 0;
[ $ONLY_PP = true ] && { xmp_exec rm -rf $TEMP_DIR; exit 0; }

### Frontend ###
for c_file in $c_files; do
    FILE_NAME=`xmp_norm_file_name $c_file`     # ./hoge/fuga.c -> hoge_2f_fuga_2f_a
    FILE_PP_I=${TEMP_DIR}/${FILE_NAME}_pp.i
    FILE_IN_X=${TEMP_DIR}/${FILE_NAME}_in.xml

    if [ $ENABLE_XACC = true ]; then
	FRONTEND_ADD_OPT="-facc $FRONTEND_ADD_OPT"
    fi

    xmp_exec $OMNI_C2X_CMD $FRONTEND_ADD_OPT $OMNI_C2X_OPT $FILE_PP_I -o $FILE_IN_X
done
[ $STOP_FRONTEND = true ] && exit 0;

### Translator ###
for c_file in $c_files; do
    FILE_NAME=`xmp_norm_file_name $c_file`     # ./hoge/fuga.c -> hoge_2f_fuga_2f_a
    FILE_IN_X=${TEMP_DIR}/${FILE_NAME}_in.xml
    FILE_OUT_X=${TEMP_DIR}/${FILE_NAME}_out.xml

    if [ $ENABLE_TLOG_ALL = true ]; then
	PROFILE_OPT="-tlog-all"
    elif [ $ENABLE_TLOG = true ]; then
	PROFILE_OPT="-tlog"
    fi

    if [ $ENABLE_SCALASCA_ALL = true ]; then
	PROFILE_OPT="-scalasca-all"
    elif [ $ENABLE_SCALASCA = true ]; then
	PROFILE_OPT="-scalasca"
    fi

    if [ $ENABLE_XACC = true ]; then
        XCODE_TRANSLATOR_ADD_OPT="-facc $XCODE_TRANSLATOR_ADD_OPT"
    fi

    xmp_exec $OMNI_CX2X_CMD $OMNI_CX2X_OPT $XCODE_TRANSLATOR_ADD_OPT $PROFILE_OPT $FILE_IN_X -o $FILE_OUT_X
    # also create ${TEMP_DIR}/${FILE_NAME}_in.c
done
[ $STOP_TRANSLATOR = true ] && exit 0;

### Backend ###
for c_file in $c_files; do
    FILE_NAME=`xmp_norm_file_name $c_file`     # ./hoge/fuga.c -> hoge_2f_fuga_2f_a
    FILE_IN_X=${TEMP_DIR}/${FILE_NAME}_in.c
    FILE_C=${TEMP_DIR}/${FILE_NAME}.c
    
    xmp_exec cp $FILE_IN_X $FILE_C
    if [ $OUTPUT_TEMPORAL = true ]; then
	xmp_exec cp $FILE_C __omni_tmp__${FILE_NAME}.c
	echo "output __omni_tmp__${FILE_NAME}.c"
    fi
done
[ $STOP_BACKEND = true ] && exit 0;

### Native Compiler ###
for c_file in $c_files; do
    FILE_NAME=`xmp_norm_file_name $c_file`     # ./hoge/fuga.c -> hoge_2f_fuga_2f_a
    FILE_C=${TEMP_DIR}/${FILE_NAME}.c
    FILE_O=${TEMP_DIR}/${FILE_NAME}.o
    FILE_USER_O=`basename $c_file .c`.o

    [ $ENABLE_OPENMP = true ] && OPENMP_ADD_OPT="$OPENMP_OPT"
    xmp_exec $OMNI_MPICC_CMD $NATIVE_ADD_OPT $OMNI_MPICC_OPT $OPENMP_ADD_OPT $other_args $FILE_C -o $FILE_O

    ### GPU Compiler ###
    FILE_CU=${TEMP_DIR}/${FILE_NAME}_pp.cu
    FILE_GPUO=${TEMP_DIR}/${FILE_NAME}.gpu.o
    if [ $ENABLE_XACC = true ] && [ -e $FILE_CU ]; then
	xmp_exec $OMNI_GPUCC_CMD $OMNI_GPUCC_OPT $FILE_CU -o $FILE_GPUO
	FILE_O_TMP=${TEMP_DIR}/${FILE_NAME}.cpu.o
	xmp_exec mv $FILE_O $FILE_O_TMP
	xmp_exec ld -r $FILE_O_TMP $FILE_GPUO -o $FILE_O
	xmp_exec rm $FILE_O_TMP
    fi

    xmp_exec cp $FILE_O $FILE_USER_O
done
[ $STOP_COMPILE = true ] && exit 0;
[ $ENABLE_LINKER = false ] && { xmp_exec rm -rf $TEMP_DIR; exit 0; }

### Linker ###
# collect initialize modules
for c_file in $c_files; do
    FILE_NAME=`xmp_norm_file_name $c_file`     # ./hoge/fuga.c -> hoge_2f_fuga_2f_a
    FILE_O=${TEMP_DIR}/${FILE_NAME}.o
    obj_files="$obj_files $FILE_O"
done

xmp_exec $XMP_COLLECT_INIT $obj_files --PID ${PID}   # create /tmp/_xmpc_init_${PID}.o
FILE_COLLECT_O=${TEMP_DIR}/__omni_collect__$PID.o
xmp_exec mv /tmp/_xmpc_init_${PID}.o $FILE_COLLECT_O

# link
if [ $ENABLE_TLOG_ALL = true ] || [ $ENABLE_TLOG = true ]; then
    PROFILE_OPT="-ltlog_mpi"
fi

if [ $ENABLE_XACC = true ]; then
    LINKER_ADD_OPT="-lacc -L@GPGPU_PREFIX@/lib64 -lcudart $LINKER_ADD_OPT"
fi

if [ "$OUTPUT_FILE" = "" ]; then
    xmp_exec $OMNI_LINKER_CMD $FILE_COLLECT_O $obj_files $OMNI_LINKER_OPT $PROFILE_OPT $LINKER_ADD_OPT $other_args $archive_files
else
    xmp_exec $OMNI_LINKER_CMD $FILE_COLLECT_O $obj_files $OMNI_LINKER_OPT $PROFILE_OPT $LINKER_ADD_OPT $other_args $archive_files -o $OUTPUT_FILE
fi

### Delete temporal directory ###
[ $ENABLE_DEBUG = false ] && xmp_exec rm -rf $TEMP_DIR

exit 0
